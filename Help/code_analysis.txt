I) program.c
	contains 3 programs which access data/memory in 3 different ways
	1. sort
	2. scan
	3. focus

	The srand() function uses the argument as a seed for a new sequence of
	       pseudo-random numbers to be returned by subsequent calls to rand().
	It itself does not generate any random numbers. We need to call rand() to generate random numbers.

II) disk.c, disk.h
	struct disk
	1. disk_open()
	2. disk_write()
	3. disk_read()
	4. disk_nblocks()
	5. disk_close()

	DESCRIPTION
	pread() reads up to count bytes from file descriptor fd at offset  off‐
	set  (from the start of the file) into the buffer starting at buf.  The
	file offset is not changed.

	pwrite() writes up to count bytes from the buffer starting  at  buf  to
	the  file  descriptor  fd  at  offset  offset.   The file offset is not
	changed.

	The file referenced by fd must be capable of seeking.

	RETURN VALUE
	On success, pread() returns the number of bytes read (a return of  zero
	indicates  end  of file) and pwrite() returns the number of bytes writ‐
	ten.

	Note that is not an error for a successful call to transfer fewer bytes
	than requested (see read(2) and write(2)).

	On  error, -1 is returned and errno is set to indicate the cause of the
	error.




	The  truncate()  and ftruncate() functions cause the regular file named
	by path or referenced by fd to be truncated  to  a  size  of  precisely
	length bytes.

	If  the  file  previously  was larger than this size, the extra data is
	lost.  If the file previously was shorter,  it  is  extended,  and  the
	extended part reads as null bytes ('\0').

	The file offset is not changed.


III) page_table.c, page_table.h

	1. page_table_create()
	
	
->	The sigaction structure is defined as something like:

           struct sigaction {
               void     (*sa_handler)(int);
               void     (*sa_sigaction)(int, siginfo_t *, void *);
               sigset_t   sa_mask;
               int        sa_flags;
               void     (*sa_restorer)(void);
           };

->	sa_flags specifies a set of flags which modify the behavior of the sig‐
       nal.
	SA_SIGINFO (since Linux 2.2)
                  The  signal handler takes three arguments, not one.  In this
                  case, sa_sigaction should  be  set  instead  of  sa_handler.
                  This flag is meaningful only when establishing a signal han‐
                  dler.

->	sa_mask  specifies  a  mask  of  signals which should be blocked (i.e.,
       added to the signal mask of the thread in which the signal  handler  is
       invoked) during execution of the signal handler.  In addition, the sig‐
       nal which triggered the handler will be blocked, unless the  SA_NODEFER
       flag is used.

->	'sigfillset' initializes a signal set to contain all signals. The signal set sa_mask is the set of signals that are blocked when the 		signal handler is being executed. So, when you are executing a signal handler all signals are blocked and you don't have to worry for 		another signal interrupting your signal handler.

->	int sigaction(int signum, const struct sigaction *act,
                     struct sigaction *oldact);

		The  sigaction()  system  call  is used to change the action taken by a
	       process on receipt of a specific signal.  (See signal(7) for  an  over‐
	       view of signals.)

	       signum  specifies the signal and can be any valid signal except SIGKILL
	       and SIGSTOP.

	       If act is non-NULL, the new action for signal signum is installed  from
	       act.  If oldact is non-NULL, the previous action is saved in oldact.


->		sigaction() returns 0 on success; on error, -1 is returned,  and  errno
       is set to indicate the error.




----------------------------------------------------------------------------------------------------------------------------
	void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);

->	mmap() creates a new mapping in the virtual address space of the calling process.  The starting address for the new mapping is spec‐  
     ified in addr.  The length argument specifies the length of the mapping.

->	The prot argument describes the desired memory protection of the mapping (and must not conflict with the open mode of the file).

->	The  flags  argument  determines  whether updates to the mapping are visible to other processes mapping the same region, and whether
       updates are carried through to the underlying file.  This behavior is determined by including exactly one of the following values in
       flags:

       MAP_SHARED
              Share this mapping.  Updates to the mapping are visible to other processes that map this file, and are carried through to the
              underlying file.  (To precisely control when updates are  carried  through  to  the  underlying  file  requires  the  use  of
              msync(2).)

	In addition, zero or more of the following values can be ORed in flags:

	MAP_NORESERVE
              Do not reserve swap space for this mapping.  When swap space is reserved, one has the guarantee that it is possible to modify
              the mapping.  When swap space is not reserved one might get SIGSEGV upon a write if no physical  memory  is  available.   See
              also  the discussion of the file /proc/sys/vm/overcommit_memory in proc(5).  In kernels before 2.6, this flag had effect only
              for private writable mappings.

->	On success, mmap() returns a pointer to the mapped area.  On error, the value MAP_FAILED (that is,  (void *) -1)  is  returned,  and
       errno is set to indicate the cause of the error.



	2. page_table_delete()

		int munmap(void *addr, size_t length);

		munmap()
       The munmap() system call deletes the mappings for the specified address range, and causes further references to addresses within the
       range  to  generate  invalid  memory  references.  The region is also automatically unmapped when the process is terminated.  On the
       other hand, closing the file descriptor does not unmap the region.

       The address addr must be a multiple of the page size (but length need not be).  All pages containing a part of the  indicated  range
       are  unmapped,  and  subsequent references to these pages will generate SIGSEGV.  It is not an error if the indicated range does not
       contain any mapped pages.

RETURN VALUE

       On  success,  munmap()  returns 0.  On failure, it returns -1, and errno is set to indicate the cause of the error (probably to EIN‐
       VAL).



	3. page_table_set_entry()

	int remap_file_pages(void *addr, size_t size, int prot,
                            size_t pgoff, int flags);

	The remap_file_pages() system call is used to create a  nonlinear  map‐
	ping, that is, a mapping in which the pages of the file are mapped into
	a  nonsequential   order   in   memory.    The   advantage   of   using
	remap_file_pages()  over  using  repeated  calls to mmap(2) is that the
	former approach does not require the kernel to  create  additional  VMA
	(Virtual Memory Area) data structures.


	To create a nonlinear mapping we perform the following steps:

       1. Use mmap(2) to create a mapping (which is initially linear).  This mapping must be created with the MAP_SHARED flag.

       2. Use one or more calls to remap_file_pages() to rearrange the correspondence between the pages of the mapping and the pages of the
          file.  It is possible to map the same page of a file into multiple locations within the mapped region.

       The  pgoff  and  size arguments specify the region of the file that is to be relocated within the mapping: pgoff is a file offset in
       units of the system page size; size is the length of the region in bytes.

       The addr argument serves two purposes.  First, it identifies the mapping whose pages we want to rearrange.  Thus, addr  must  be  an
       address  that  falls  within  a region previously mapped by a call to mmap(2).  Second, addr specifies the address at which the file
       pages identified by pgoff and size will be placed.

       The values specified in addr and size should be multiples of the system page size.  If they are not, then  the  kernel  rounds  both
       values down to the nearest multiple of the page size.

       The prot argument must be specified as 0.

       The flags argument has the same meaning as for mmap(2), but all flags other than MAP_NONBLOCK are ignored.

RETURN VALUE
       On success, remap_file_pages() returns 0.  On error, -1 is returned, and errno is set appropriately.	


----------------------------------------------------------------------------------------------------------------------
-> 	int mprotect(void *addr, size_t len, int prot);

DESCRIPTION
       mprotect()  changes  protection  for  the  calling process's memory page(s) containing any part of the address range in the interval
       [addr, addr+len-1].  addr must be aligned to a page boundary.

       If the calling process tries to access memory in a manner that violates the protection, then the kernel generates a  SIGSEGV  signal
       for the process.

       prot is either PROT_NONE or a bitwise-or of the other values in the following list:

       PROT_NONE  The memory cannot be accessed at all.

       PROT_READ  The memory can be read.

       PROT_WRITE The memory can be modified.

       PROT_EXEC  The memory can be executed.

RETURN VALUE
       On success, mprotect() returns zero.  On error, -1 is returned, and errno is set appropriately.




IV) program.c

	qsort is a C standard library function that implements a polymorphic sorting algorithm for arrays of arbitrary objects according to a user-provided comparison function.

	void qsort(void *base, size_t nmemb, size_t size,
                  int (*compar)(const void *, const void *));

	The qsort() function sorts an array with nmemb elements of size size.  The base argument points to the start of the array.

       The  contents  of  the  array are sorted in ascending order according to a comparison function pointed to by compar, which is called
       with two arguments that point to the objects being compared.

       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered  to  be
       respectively  less  than, equal to, or greater than the second.  If two members compare as equal, their order in the sorted array is
       undefined.

	It returns no value
